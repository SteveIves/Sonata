;;*****************************************************************************
;;
;; Title:       HostSupport.dbl
;;
;; Type:        Class
;;
;; Description: Exposes host application functionality to hosted programs
;;
;; Date:        14th February 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Windows.Threading

namespace Sonata.Environment
	
	public class HostSupport extends MarshalByRefObject

		private mainMenuUiDispatcher, @Dispatcher

		public method HostSupport
		proc
			mainMenuUiDispatcher = Dispatcher.CurrentDispatcher
		endmethod

		public delegate HostSupportClose, void
			required in proxy, @ProgramProxy
		enddelegate
		
		public delegate HostSupportFatalError, void
			required in proxy, @ProgramProxy
			required in errorMessage, String
		enddelegate
		
		public delegate HostSupportCriticalSection, void
			required in proxy, @ProgramProxy
			required in inCriticalSection, boolean
		enddelegate

		public event ApplicationClose, @HostSupportClose

		public event ApplicationFatalError, @HostSupportFatalError

		public event ApplicationCriticalSection, @HostSupportCriticalSection

		;;Called by the ProgramProxy when the programs Close event is raised
		public method Close, void
			required in proxy, @ProgramProxy
			endparams
		proc
			;Raise an event back into Sonata on its main UI thread
			lambda doClose()
			begin
				raiseevent(ApplicationClose,proxy)
			end
			if (ApplicationClose!=^null)
				mainMenuUiDispatcher.BeginInvoke(doClose)
		endmethod
		
		;;Called by the ProgramProxy when the programs FatalError event is raised
		public method FatalError, void
			required in proxy, @ProgramProxy
			required in errorMessage, string
		proc
			;Raise an event back into Sonata on its main UI thread
			lambda doFatalError()
			begin
				raiseevent(ApplicationFatalError,proxy,errorMessage)
			end
			if (ApplicationFatalError!=^null)
				mainMenuUiDispatcher.BeginInvoke(doFatalError)
		endmethod
		
		;;Called by the ProgramProxy when the programs ProcessingCriticalSection event is raised
		public method CriticalSection, void
			required in proxy, @ProgramProxy
			required in inCriticalSection, boolean
		proc
			;Raise an event back into Sonata on its main UI thread
			lambda doCriticalSection()
			begin
				raiseevent(ApplicationCriticalSection,proxy,inCriticalSection)
			end
			if (ApplicationCriticalSection!=^null)
				mainMenuUiDispatcher.BeginInvoke(doCriticalSection)
		endmethod
		
	endclass
	
endnamespace
