;;*****************************************************************************
;;
;; Title:       CriticalProcessingTestViewModel.dbl
;;
;; Type:        Class
;;
;; Description: ViewModel for CriticalProcessingTest example program
;;
;; Date:        18th February 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Windows.Input
import Sonata.Interface
import Sonata.Interface.Tools

namespace SonataExamplePrograms.ViewModel

	public class CriticalProcessingTestViewModel extends ViewModelBase implements IMenuCriticalSection

		public method CriticalProcessingTestViewModel
			required in aView, @IMenuView
			endparams
			parent(aView)
		proc
			
		endmethod

		private mButtonText, String, "Simulate Critical Processing"

		public property ButtonText, String
			method get
			proc
				mreturn mButtonText
			endmethod
			method set
			proc
				mButtonText = value
				NotifyPropertyChanged("ButtonText")
			endmethod
		endproperty

		private mMessageText, String, "It should be possible to close this application, or Sonata"
		
		public property MessageText, String
			method get
			proc
				mreturn mMessageText
			endmethod
			method set
			proc
				mMessageText = value
				NotifyPropertyChanged("MessageText")
			endmethod
		endproperty

		private mToggleCriticalCommand, @ICommand
		
		public property ToggleCriticalCommand, @ICommand
			method get
			proc
				if ((mToggleCriticalCommand == ^null))
					mToggleCriticalCommand = new RelayCommand(doToggleCriticalCommand)
				mreturn mToggleCriticalCommand
			endmethod
		endproperty

		;TODO: BUG: Should be a lambda but event != ^null doesn't work in a lambda!
		private method doToggleCriticalCommand, void
			required in param, @Object
			endparams
		proc
			mProcessingCriticalCode = !mProcessingCriticalCode
			if (mProcessingCriticalCode) then
			begin
				if (ProcessingCriticalSection != ^null)
					ProcessingCriticalSection(true)
				ButtonText = "Stop Simulating Critical Processing"
				MessageText = "It SHOULD NOT be possible to close this application, or Sonata"
			end
			else
			begin
				if (ProcessingCriticalSection != ^null)
					ProcessingCriticalSection(false)
				ButtonText = "Simulate Critical Processing"
				MessageText = "It should be possible to close this application, or Sonata"
			end
		endmethod

.region "IMenuCriticalSection Members"
		
		public event ProcessingCriticalSection, @CriticalSectionEventHandler

		private mProcessingCriticalCode, boolean, false

.endregion
		
.region "IMenuViewModel Overrides"
		
		;;; <summary>
		;;; Called by Sonata when a brand new program instance has been created.
		;;; </summary>
		public override method Initializing, boolean
			required out errorMessage, String
			endparams
		proc
			mreturn true
		endmethod
		
		;;; <summary>
		;;; Called by Sonata when this program instance is about to be deleted.
		;;; </summary>
		public override method Closing, void
			endparams
		proc

		endmethod
		
.endregion

	endclass

endnamespace
