;;*****************************************************************************
;;
;; Title:       CalculatorModel.dbl
;;
;; Type:        Class
;;
;; Description: Main Model for Calculator example program
;;
;; Date:        19th February 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System

.array 0
namespace SonataExamplePrograms.Model

	public class CalculatorModel
	
		private mFirstOperand, string		
		private mSecondOperand, string		
		private mOperation, string
		private mResult, string
		
		public method CalculatorModel
			aFirstOperand, string 
			aSecondOperand, string 
			aOperation, string 
			endparams
		proc
			ValidateOperand(aFirstOperand)
			ValidateOperand(aSecondOperand)
			ValidateOperation(aOperation)
			FirstOperand = aFirstOperand
			SecondOperand = aSecondOperand
			Operation = aOperation
			mResult = string.Empty
		endmethod
		
		public method CalculatorModel
			aFirstOperand, string 
			aOperation, string 
			endparams
		proc
			ValidateOperand(aFirstOperand)
			ValidateOperation(aOperation)
			FirstOperand = aFirstOperand
			SecondOperand = string.Empty
			Operation = aOperation
			mResult = string.Empty
		endmethod
		
		public method CalculatorModel
			endparams
		proc
			FirstOperand = string.Empty
			SecondOperand = string.Empty
			Operation = string.Empty
			mResult = string.Empty
		endmethod
		
		public property FirstOperand, string
			method get
			proc
				mreturn mFirstOperand
			endmethod
			method set
			proc
				mFirstOperand = value
			endmethod
		endproperty
		
		public property SecondOperand, string
			method get
			proc
				mreturn mSecondOperand
			endmethod
			method set
			proc
				mSecondOperand = value
			endmethod
		endproperty
		
		public property Operation, string
			method get
			proc
				mreturn mOperation
			endmethod
			method set
			proc
				mOperation = value
			endmethod
		endproperty
		
		public property Result, string
			method get
			proc
				mreturn mResult
			endmethod
		endproperty
		
		public method CalculateResult, void
			endparams
		proc
			ValidateData()
			try
			begin
				using Operation select
				("+"),
				begin
					data tmpResult, double, Convert.ToDouble(mFirstOperand)+Convert.ToDouble(mSecondOperand)
					mResult = tmpResult.ToString()
				end
				("-"),
				begin
					data tmpResult, double, Convert.ToDouble(mFirstOperand)-Convert.ToDouble(mSecondOperand)
					mResult = tmpResult.ToString()
				end
				("*"),
				begin
					data tmpResult, double, Convert.ToDouble(mFirstOperand)*Convert.ToDouble(mSecondOperand)
					mResult = tmpResult.ToString()
				end
				("/"),
				begin
					data tmpResult, double, Convert.ToDouble(mFirstOperand)/Convert.ToDouble(mSecondOperand)
					mResult = tmpResult.ToString()
				end
				("sin"),
					mResult = Math.Sin(DegreeToRadian(Convert.ToDouble(FirstOperand))).ToString()
				("cos"),
					mResult = Math.Cos(DegreeToRadian(Convert.ToDouble(FirstOperand))).ToString()
				("tan"),
					mResult = Math.Tan(DegreeToRadian(Convert.ToDouble(FirstOperand))).ToString()
				endusing
			end
			catch (ex, @Exception)
			begin
				mResult = "Error whilst calculating"
				throw
			end
			endtry
		endmethod
		
		private method DegreeToRadian, double
			angle, double 
			endparams
		proc
			mreturn ((Math.PI * angle) / 180.0)
		endmethod
		
		private method ValidateOperand, void
			operand, string 
			endparams
		proc
			try
			begin
				Convert.ToDouble(operand)
			end
			catch (ex, @Exception)
			begin
				mResult = ("Invalid number: " + operand)
				throw
			end
			endtry
		endmethod
		
		private method ValidateOperation, void
			operation, string 
			endparams
		proc
			using Operation select
			("/","*","-","+","tan","cos","sin"),
				nop
			(),
			begin
				mResult = ("Unknown operation: " + operation)
				throw new ArgumentException("Unknown Operation: " + operation, "operation")
			end
			endusing
		endmethod
		
		private method ValidateData, void
			endparams
		proc
			using Operation select
			("/","*","-","+"),
			begin
				ValidateOperand(FirstOperand)
				ValidateOperand(SecondOperand)
			end
			("tan","cos","sin"),
				ValidateOperand(FirstOperand)
			(),
			begin
				mResult = ("Unknown operation: " + Operation)
				throw new ArgumentException("Unknown Operation: " + Operation, "operation")
			end
			endusing
		endmethod

	endclass

endnamespace
