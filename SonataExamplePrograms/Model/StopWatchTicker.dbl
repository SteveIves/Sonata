;;*****************************************************************************
;;
;; Title:       StopWatchTicker.dbl
;;
;; Type:        Class
;;
;; Description: Main Model for StopWatch example program
;;
;; Date:        19th February 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Windows.Threading

namespace SonataExamplePrograms.Model

	;;; <summary>
	;;; A class which implements the functionality of a simple stop watch
	;;; </summary>
	public class StopWatchTicker
		
		private mInterval	,TimeSpan
		private mTimer		,@DispatcherTimer
		private mStartTime	,DateTime
		
		public event ValueChanged, @EventHandler
		
		;;; <summary>
		;;; Constructor
		;;; </summary>
		public method StopWatchTicker
			endparams
		proc
			mTimer = new DispatcherTimer()
			mTimer.Interval = new TimeSpan(0, 0, 0, 0, 100)
			mTimer.Tick += new EventHandler(mTimer_Tick)
			UpdateInterval(true)
		endmethod
		
		private method mTimer_Tick, void
			sender, @object 
			e, @EventArgs 
			endparams
		proc
			UpdateInterval(false)
		endmethod
		
		private method UpdateInterval, void
			reset, boolean 
			endparams
		proc
			if (reset) then
				mInterval = new TimeSpan()
			else
				mInterval = (DateTime.Now - mStartTime)
			if (ValueChanged!=^null)
				ValueChanged(this,new EventArgs())
		endmethod
		
		public property ElapsedTime, TimeSpan
			method get
			proc
				mreturn mInterval
			endmethod
		endproperty
		
		;;; <summary>
		;;; Start the timer
		;;; </summary>
		public method Start, void
			endparams
		proc
			if (!mTimer.IsEnabled)
			begin
				mStartTime = (DateTime.Now - mInterval)
				mTimer.Start()
			end
		endmethod
		
		;;; <summary>
		;;; Stop the timer
		;;; </summary>
		public method Stop, void
			endparams
		proc
			if (mTimer.IsEnabled)
				mTimer.Stop()
		endmethod
		
		;;; <summary>
		;;; Reset the timer to zero
		;;; </summary>
		public method Clear, void
			endparams
		proc
			mStartTime = DateTime.Now
			UpdateInterval(true)
		endmethod
		
		;;; <summary>
		;;; Indicates if the timer is running
		;;; </summary>
		public property IsStarted, Boolean
			method get
			proc
				mreturn mTimer.IsEnabled
			endmethod
		endproperty
		
	endclass

endnamespace
