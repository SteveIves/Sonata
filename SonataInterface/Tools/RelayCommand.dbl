;;*****************************************************************************
;;
;; Title:       RelayCommand.dbl
;;
;; Type:        Class
;;
;; Description: Relays local methods as an ICommand
;;
;; Date:        18th February 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Diagnostics
import System.Windows.Input

namespace Sonata.Interface.Tools
	
	;;;<summary>
	;;;A command whose sole purpose is to 
	;;;relay its functionality to other
	;;;objects by invoking delegates. The
	;;;default return value for the CanExecute
	;;;method is 'true'.
	;;;</summary>
	public class RelayCommand implements ICommand
		
.region "Fields"
		
		public delegate RelayCommandAction, void
			parameter, @Object
		enddelegate
		
		public delegate RelayCommandPredicate, boolean
			parameter, @Object
		enddelegate
		
		private readonly mExecute, @RelayCommandAction
		private readonly mCanExecute, @RelayCommandPredicate
		
		;;Used to hold a strong reference to the event handler, because CommandManager only holds a weak
		;;reference to it, so it would be garbage collected unless we hold a strong reference to it.
		private mHoldEventHandler, @EventHandler
		
.endregion
		
.region "Constructors"
		
		;;;<summary>
		;;;Creates a new command that can always execute.
		;;;</summary>
		;;;<param name="execute">The execution logic.</param>
		public method RelayCommand
			required in execute, @RelayCommandAction
			endparams
			this(execute, ^null)
		proc
		endmethod
		
		;;;<summary>
		;;;Creates a new command.
		;;;</summary>
		;;;<param name="execute">The execution logic.</param>
		;;;<param name="canExecute">The execution status logic.</param>
		public method RelayCommand
			required in execute, @RelayCommandAction
			required in canExecute, @RelayCommandPredicate
			endparams
		proc
			if (execute == ^null)
				throw new ArgumentNullException("execute")
			mExecute = execute
			mCanExecute = canExecute
			;Workaround: Doing this because we don't have add/remove methods on events
			mHoldEventHandler = new EventHandler(canExecuteChangedFired) ;Hold a strong reference!
			addhandler(CommandManager.RequerySuggested, mHoldEventHandler)
		endmethod
		
.endregion
		
.region "ICommand Members"
		
		{DebuggerStepThrough}
		public method CanExecute, Boolean
			required in parameter, @Object
			endparams
		proc
			if (mCanExecute==^null) then
				mreturn true
			else
				mreturn mCanExecute(parameter)
		endmethod
		
		public event CanExecuteChanged, @EventHandler
		
		private method canExecuteChangedFired, void
			required in sender, @Object
			required in e, @EventArgs
			endparams
		proc
			if (CanExecuteChanged!=^null)
				CanExecuteChanged(sender,e)
		endmethod
		
		public method Execute, void
			required in parameter, @Object
			endparams
		proc
			mExecute(parameter)
		endmethod
		
.endregion
		
	endclass
	
endnamespace

